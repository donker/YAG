<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="allow-wrap.Help" xml:space="preserve">
    <value>This option determines whether or not a slideshow can advance from the last slide to the first (or vice versa). If set to false then once a slideshow reaches its last slide it can no longer be advanced forward, it can only advance backward. Likewise, when a slideshow is displaying the first slide it can not advance backward.</value>
  </data>
  <data name="allow-wrap.Text" xml:space="preserve">
    <value>Allow Wrap</value>
  </data>
  <data name="auto-height.Help" xml:space="preserve">
    <value>This option determines whether or not Cycle2 will provide height management for the slideshow which can be very useful in fluid or responsive designs. There are three ways this option can be used:
an integer can be provided to identify the zero-based slide index for a sentinel slide
the string "calc" can be provided to instruct Cycle2 to calculate the tallest slide and use it as the sentinel
a ratio string can be provided which identifies the width:height aspect ratio for the container
By default, the slideshow's first slide is used as the sentinel slide and its demensions will control the height of the slideshow container if the container does not have a specific height set via CSS.
To disable height management, set this option's value to -1 or false.
</value>
  </data>
  <data name="auto-height.Text" xml:space="preserve">
    <value>Auto Height</value>
  </data>
  <data name="delay.Help" xml:space="preserve">
    <value>additional delay (in ms) for first transition (hint: can be negative)</value>
  </data>
  <data name="delay.Text" xml:space="preserve">
    <value>Delay</value>
  </data>
  <data name="easing.Help" xml:space="preserve">
    <value>Name of easing function to use. See http://easings.net for a list.</value>
  </data>
  <data name="easing.Text" xml:space="preserve">
    <value>Easing Function</value>
  </data>
  <data name="fx.Help" xml:space="preserve">
    <value>Select which transition effect to use</value>
  </data>
  <data name="fx.Text" xml:space="preserve">
    <value>Transition Effect</value>
  </data>
  <data name="loop.Help" xml:space="preserve">
    <value>The number of times an auto-advancing slideshow should loop before terminating. If the value is less than 1 then the slideshow will loop continuously. Set to 1 to loop once, etc.</value>
  </data>
  <data name="loop.Text" xml:space="preserve">
    <value>Loop</value>
  </data>
  <data name="pause-on-hover.Help" xml:space="preserve">
    <value>If true an auto-running slideshow will be paused while the mouse is over the slideshow.</value>
  </data>
  <data name="pause-on-hover.Text" xml:space="preserve">
    <value>Pause On Hover</value>
  </data>
  <data name="random.Help" xml:space="preserve">
    <value>true for random, false for sequence (not applicable to shuffle fx)</value>
  </data>
  <data name="random.Text" xml:space="preserve">
    <value>Random</value>
  </data>
  <data name="reverse.Help" xml:space="preserve">
    <value>causes animations to transition in reverse (for effects that support it such as scrollHorz/scrollVert/shuffle)</value>
  </data>
  <data name="reverse.Text" xml:space="preserve">
    <value>Reverse</value>
  </data>
  <data name="speed.Help" xml:space="preserve">
    <value>speed of the transition (any valid fx speed value)</value>
  </data>
  <data name="speed.Text" xml:space="preserve">
    <value>Speed</value>
  </data>
  <data name="starting-slide.Help" xml:space="preserve">
    <value>The zero-based index of the slide that should be initially displayed.</value>
  </data>
  <data name="starting-slide.Text" xml:space="preserve">
    <value>Starting Slide</value>
  </data>
  <data name="swipe.Help" xml:space="preserve">
    <value>Set to true to enable swipe gesture support for advancing the slideshow forward or back.</value>
  </data>
  <data name="swipe.Text" xml:space="preserve">
    <value>Swipe</value>
  </data>
  <data name="sync.Help" xml:space="preserve">
    <value>true if in/out transitions should occur simultaneously</value>
  </data>
  <data name="sync.Text" xml:space="preserve">
    <value>Sync</value>
  </data>
  <data name="timeout.Help" xml:space="preserve">
    <value>milliseconds between slide transitions (0 to disable auto advance)</value>
  </data>
  <data name="timeout.Text" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="pager.Help" xml:space="preserve">
    <value>If selected then a pager will be superimposed consisting of bullets</value>
  </data>
  <data name="pager.Text" xml:space="preserve">
    <value>Pager</value>
  </data>
</root>